graph(%0 : Float(*, *)
      %1 : Float(*, *)
      %2 : UndefinedTensor
      %3 : UndefinedTensor
      %4 : UndefinedTensor
      %5 : UndefinedTensor
      %6 : UndefinedTensor
      %7 : UndefinedTensor
      %8 : UndefinedTensor
      %9 : UndefinedTensor
      %10 : Float(*, *)
      %11 : Float(*)
      %12 : Float(*)
      %13 : Float(*)
      %14 : Float(*, *)
      %15 : Float(*, *)
      %Wx : Float(*, *)
      %Uz : Float(*, *)
      %18 : Float(*, *)
      %19 : int[]
      %20 : int[]
      %21 : int[]
      %22 : int[]
      %23 : int[]
      %24 : int[]
      %ingate : Float(*, *)
      %forgetgate : Float(*, *)
      %cellgate : Float(*, *)
      %outgate : Float(*, *)
      %29 : int[]
      %30 : int[]
      %31 : Float(*, *)) {
  %32 : int = prim::Constant[value=1]()
  %33 : Float(*, *) = aten::mul(%0, %31)
  %34 : int[] = aten::size(%outgate)
  %grad_self.1 : Tensor = aten::sum_to_size(%33, %34)
  %36 : Float(*, *) = aten::mul(%0, %outgate)
  %37 : int[] = aten::size(%31)
  %grad_other.1 : Tensor = aten::sum_to_size(%36, %37)
  %39 : Tensor = prim::FusionGroup_0(%1, %grad_other.1, %31)
  %40 : Tensor = prim::SumToSize(%39, %29)
  %41 : Tensor = prim::SumToSize(%39, %30)
  %42 : Tensor = aten::mul(%41, %cellgate)
  %43 : int[] = aten::size(%ingate)
  %grad_self.3 : Tensor = aten::sum_to_size(%42, %43)
  %45 : Tensor = aten::mul(%41, %ingate)
  %46 : int[] = aten::size(%cellgate)
  %grad_other.3 : Tensor = aten::sum_to_size(%45, %46)
  %48 : Tensor = aten::mul(%40, %10)
  %49 : int[] = aten::size(%forgetgate)
  %grad_self.5 : Tensor = aten::sum_to_size(%48, %49)
  %51 : Tensor = prim::FusionGroup_1(%grad_self.3, %ingate, %grad_self.5, %forgetgate, %grad_other.3, %cellgate, %grad_self.1, %outgate)
  %52 : Tensor = prim::SumToSize(%51, %24)
  %53 : Tensor = prim::SumToSize(%51, %22)
  %54 : Tensor = aten::mul(%53, %Uz)
  %55 : int[] = aten::size(%11)
  %grad_self.7 : Tensor = aten::sum_to_size(%54, %55)
  %57 : Tensor = aten::mul(%53, %11)
  %58 : int[] = aten::size(%Uz)
  %grad_other.7 : Tensor = aten::sum_to_size(%57, %58)
  %60 : Tensor = prim::SumToSize(%51, %19)
  %61 : Tensor = prim::SumToSize(%51, %20)
  %62 : Tensor = aten::mul(%61, %Wx)
  %63 : int[] = aten::size(%12)
  %grad_self.9 : Tensor = aten::sum_to_size(%62, %63)
  %65 : Tensor = aten::mul(%61, %12)
  %66 : int[] = aten::size(%Wx)
  %grad_other.9 : Tensor = aten::sum_to_size(%65, %66)
  %68 : Tensor = aten::mul(%60, %Uz)
  %69 : int[] = aten::size(%18)
  %grad_self.11 : Tensor = aten::sum_to_size(%68, %69)
  %71 : Tensor = aten::mul(%60, %18)
  %grad_other.11 : Tensor = aten::sum_to_size(%71, %58)
  %73 : Tensor = aten::add(%grad_other.7, %grad_other.11, %32)
  %74 : Tensor = aten::mul(%grad_self.11, %Wx)
  %75 : int[] = aten::size(%13)
  %grad_self.13 : Tensor = aten::sum_to_size(%74, %75)
  %77 : Tensor = aten::mul(%grad_self.11, %13)
  %grad_other.13 : Tensor = aten::sum_to_size(%77, %66)
  %79 : Tensor = aten::add(%grad_other.9, %grad_other.13, %32)
  %80 : Float(*, *) = aten::t(%14)
  %81 : Float(*, *) = aten::mm(%80, %73)
  %82 : Float(*, *) = aten::t(%81)
  %83 : Float(*, *) = aten::t(%15)
  %84 : Float(*, *) = aten::mm(%83, %79)
  %85 : Float(*, *) = aten::t(%84)
  return (%52, %grad_self.7, %grad_self.9, %grad_self.13, %82, %85);
}
with prim::FusionGroup_0 = graph(%0 : Float(*, *)
      %1 : Tensor
      %2 : Float(*, *)) {
  %3 : Float(*, *) = aten::mul(%2, %2)
  %4 : Float(*, *) = aten::neg(%3)
  %5 : int = prim::Constant[value=1]()
  %6 : Float(*, *) = aten::add(%4, %5, %5)
  %7 : Tensor = aten::mul(%1, %6)
  %8 : int = prim::Constant[value=1]()
  %9 : Tensor = aten::add(%0, %7, %8)
  return (%9);
}
with prim::FusionGroup_1 = graph(%0 : Tensor
      %1 : Float(*, *)
      %2 : Tensor
      %3 : Float(*, *)
      %4 : Tensor
      %5 : Float(*, *)
      %6 : Tensor
      %7 : Float(*, *)) {
  %8 : Float(*, *) = aten::neg(%7)
  %9 : int = prim::Constant[value=1]()
  %10 : Float(*, *) = aten::add(%8, %9, %9)
  %11 : Float(*, *) = aten::mul(%10, %7)
  %12 : Tensor = aten::mul(%11, %6)
  %13 : Float(*, *) = aten::mul(%5, %5)
  %14 : Float(*, *) = aten::neg(%13)
  %15 : int = prim::Constant[value=1]()
  %16 : Float(*, *) = aten::add(%14, %15, %15)
  %17 : Tensor = aten::mul(%4, %16)
  %18 : Float(*, *) = aten::neg(%3)
  %19 : int = prim::Constant[value=1]()
  %20 : Float(*, *) = aten::add(%18, %19, %19)
  %21 : Float(*, *) = aten::mul(%20, %3)
  %22 : Tensor = aten::mul(%21, %2)
  %23 : Float(*, *) = aten::neg(%1)
  %24 : int = prim::Constant[value=1]()
  %25 : Float(*, *) = aten::add(%23, %24, %24)
  %26 : Float(*, *) = aten::mul(%25, %1)
  %27 : Tensor = aten::mul(%26, %0)
  %28 : Tensor = prim::FusedConcat[dim=1](%27, %22, %17, %12)
  return (%28);
}
